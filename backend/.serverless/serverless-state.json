{
  "service": {
    "service": "backend",
    "serviceObject": {
      "name": "backend"
    },
    "provider": {
      "stage": "local",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "apiGateway": {
        "minimumCompressionSize": 1024
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "sqs:SendMessage",
            "sqs:DeleteMessage"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "CreateEmissionSqsQueue",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConnectWSLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-connectWS"
            }
          },
          "DisconnectWSLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-disconnectWS"
            }
          },
          "CreateEmisionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-createEmision"
            }
          },
          "NotifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-notify"
            }
          },
          "StartStepFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-startStepFunction"
            }
          },
          "ConsumeEmisionServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-local-consumeEmisionService"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "backend-local",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-local*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-local*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "backend-local",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ConnectWSLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/connectWS.zip"
              },
              "FunctionName": "backend-local-connectWS",
              "Handler": "connectWS.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "ConnectWSLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ConnectWSLambdaVersionHJZMjtjFiHXmPzUVzj8Et7JcLQOGD7HazUhaGSkfk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectWSLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "DisconnectWSLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/disconnectWS.zip"
              },
              "FunctionName": "backend-local-disconnectWS",
              "Handler": "disconnectWS.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "DisconnectWSLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DisconnectWSLambdaVersionfaxTcEJk7tzjJ1V3jvadfxzwprCkSPbALNk38uEEo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectWSLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "CreateEmisionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/createEmision.zip"
              },
              "FunctionName": "backend-local-createEmision",
              "Handler": "createEmision.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "CreateEmisionLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateEmisionLambdaVersion7UmBeJBVwScnni71zu1iv9XpFyGAv8OugqgPzSze4lo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEmisionLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "NotifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/notify.zip"
              },
              "FunctionName": "backend-local-notify",
              "Handler": "notify.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "NotifyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "NotifyLambdaVersionKu3c6oJgCsJ4WmWOQHQBTs55gyVCSR7MWMT4ZaWNYQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "StartStepFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/startStepFunction.zip"
              },
              "FunctionName": "backend-local-startStepFunction",
              "Handler": "notify.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "StartStepFunctionLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "StartStepFunctionLambdaVersionSwC9jN7eAlT3Q1OZbTdNOJbnDneZx5APFqOOXcdWo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "StartStepFunctionLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "ConsumeEmisionServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z/consumeEmisionService.zip"
              },
              "FunctionName": "backend-local-consumeEmisionService",
              "Handler": "consumeEmisionService.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6
            },
            "DependsOn": [
              "ConsumeEmisionServiceLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ConsumeEmisionServiceLambdaVersionRKd9GnCxdEAW09FqXNiYGqgSqitRdtK4kw4OWJsmso": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConsumeEmisionServiceLambdaFunction"
              },
              "CodeSha256": "AeaYAuDPyxw5QRaCFE2VI/sisE2BHkX9idnJw+Jy07Q="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "local-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceEmission": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "emission",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEmissionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEmission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEmisionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1617713615883": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "local"
            },
            "DependsOn": [
              "ApiGatewayMethodEmissionPost"
            ]
          },
          "CreateEmisionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEmisionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "local-backend-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectWSWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectWSLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DisconnectWSWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectWSLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectWSLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectWSLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectWSLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectWSLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectWSLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectWSLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectWSWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectWSWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "local",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentxatS0d5t8Ep5Jh3Ckfbaw20yBJGH3WNoY0933WEk0"
              }
            }
          },
          "WebsocketsDeploymentxatS0d5t8Ep5Jh3Ckfbaw20yBJGH3WNoY0933WEk0": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "CreateEmissionDlqSqsQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "create-emission-sqs-dql.fifo",
              "FifoQueue": true,
              "ContentBasedDeduplication": true,
              "KmsMasterKeyId": "alias/aws/sqs",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "create-emission-sqs-dql.fifo"
                }
              ]
            }
          },
          "CreateEmissionSqsQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "create-emission-sqs.fifo",
              "FifoQueue": true,
              "ContentBasedDeduplication": true,
              "VisibilityTimeout": 60,
              "MessageRetentionPeriod": 10800,
              "KmsMasterKeyId": "alias/aws/sqs",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "CreateEmissionDlqSqsQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 5
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "create-emission-sqs.fifo"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "ConnectWSLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectWSLambdaVersionHJZMjtjFiHXmPzUVzj8Et7JcLQOGD7HazUhaGSkfk"
            }
          },
          "DisconnectWSLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectWSLambdaVersionfaxTcEJk7tzjJ1V3jvadfxzwprCkSPbALNk38uEEo"
            }
          },
          "CreateEmisionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEmisionLambdaVersion7UmBeJBVwScnni71zu1iv9XpFyGAv8OugqgPzSze4lo"
            }
          },
          "NotifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyLambdaVersionKu3c6oJgCsJ4WmWOQHQBTs55gyVCSR7MWMT4ZaWNYQ"
            }
          },
          "StartStepFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "StartStepFunctionLambdaVersionSwC9jN7eAlT3Q1OZbTdNOJbnDneZx5APFqOOXcdWo"
            }
          },
          "ConsumeEmisionServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConsumeEmisionServiceLambdaVersionRKd9GnCxdEAW09FqXNiYGqgSqitRdtK4kw4OWJsmso"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/local"
                ]
              ]
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/local"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-pseudo-parameters",
      "serverless-offline",
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "connectWS": {
        "handler": "connectWS.main",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "backend-local-connectWS",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/connectWS.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ConnectWSLambdaVersionHJZMjtjFiHXmPzUVzj8Et7JcLQOGD7HazUhaGSkfk"
      },
      "disconnectWS": {
        "handler": "disconnectWS.main",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "backend-local-disconnectWS",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/disconnectWS.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DisconnectWSLambdaVersionfaxTcEJk7tzjJ1V3jvadfxzwprCkSPbALNk38uEEo"
      },
      "createEmision": {
        "handler": "createEmision.main",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "emission",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-local-createEmision",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/createEmision.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateEmisionLambdaVersion7UmBeJBVwScnni71zu1iv9XpFyGAv8OugqgPzSze4lo"
      },
      "notify": {
        "handler": "notify.main",
        "events": [],
        "name": "backend-local-notify",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/notify.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "NotifyLambdaVersionKu3c6oJgCsJ4WmWOQHQBTs55gyVCSR7MWMT4ZaWNYQ"
      },
      "startStepFunction": {
        "handler": "notify.main",
        "events": [],
        "name": "backend-local-startStepFunction",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/startStepFunction.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "StartStepFunctionLambdaVersionSwC9jN7eAlT3Q1OZbTdNOJbnDneZx5APFqOOXcdWo"
      },
      "consumeEmisionService": {
        "handler": "consumeEmisionService.main",
        "events": [],
        "name": "backend-local-consumeEmisionService",
        "package": {
          "artifact": "/Users/JCorredor/Desktop/prueba_concepto/backend/.serverless/consumeEmisionService.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ConsumeEmisionServiceLambdaVersionRKd9GnCxdEAW09FqXNiYGqgSqitRdtK4kw4OWJsmso"
      }
    },
    "resources": {
      "Resources": {
        "CreateEmissionDlqSqsQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "create-emission-sqs-dql.fifo",
            "FifoQueue": true,
            "ContentBasedDeduplication": true,
            "KmsMasterKeyId": "alias/aws/sqs",
            "Tags": [
              {
                "Key": "Name",
                "Value": "create-emission-sqs-dql.fifo"
              }
            ]
          }
        },
        "CreateEmissionSqsQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "create-emission-sqs.fifo",
            "FifoQueue": true,
            "ContentBasedDeduplication": true,
            "VisibilityTimeout": 60,
            "MessageRetentionPeriod": 10800,
            "KmsMasterKeyId": "alias/aws/sqs",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "CreateEmissionDlqSqsQueue",
                  "Arn"
                ]
              },
              "maxReceiveCount": 5
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "create-emission-sqs.fifo"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/backend/local/1617713629480-2021-04-06T12:53:49.480Z",
    "artifact": ""
  }
}