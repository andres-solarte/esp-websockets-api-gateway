service: backend

package:
  individually: true

plugins:
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
      Resource:
        - { 'Fn::GetAtt': ['CreateEmissionSqsQueue', 'Arn'] }
    - Effect: Allow
      Action:
        - kms:Decrypt
        - kms:GenerateDataKey
      Resource: '*'

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  connectWS:
    handler: connectWS.main
    events:
      - websocket:
          route: $connect

  disconnectWS:
    handler: disconnectWS.main
    events:
      - websocket:
          route: $disconnect

  createEmision:
    handler: createEmision.main
    events:
      - http:
          method: post
          path: emission

  notify:
    handler: notify.main

  startStepFunction:
    handler: notify.main

  consumeEmisionService:
    handler: consumeEmisionService.main

resources:
  Resources:
    CreateEmissionDlqSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-emission-sqs-dql.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        KmsMasterKeyId: alias/aws/sqs
        Tags:
          - Key: Name
            Value: create-emission-sqs-dql.fifo
    CreateEmissionSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-emission-sqs.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        VisibilityTimeout: 60
        MessageRetentionPeriod: 10800
        KmsMasterKeyId: alias/aws/sqs
        RedrivePolicy:
          deadLetterTargetArn: { 'Fn::GetAtt': ['CreateEmissionDlqSqsQueue', 'Arn'] }
          maxReceiveCount: 5
        Tags:
          - Key: Name
            Value: create-emission-sqs.fifo
#      path: emission/{uuid}/create-emission
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

